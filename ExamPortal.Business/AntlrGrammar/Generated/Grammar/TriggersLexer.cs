//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/Triggers.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TriggersLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SOURCE_TOKEN=1, DEST_TOKEN=2, VALUEIDENTIFIER=3, QUERY=4, LPAREN=5, FROM=6, 
		DATA=7, STAR=8, COUNT=9, RPAREN=10, WHERE=11, EQ=12, COMMA=13, NE=14, 
		IN=15, NOT_IN=16, GT=17, LT=18, GE=19, IS=20, LE=21, AND=22, EMPTY=23, 
		OR=24, ACCOUNT=25, IDENTIFIER=26, DATE=27, WS=28, INVALID=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SOURCE_TOKEN", "DEST_TOKEN", "VALUEIDENTIFIER", "QUERY", "LPAREN", "FROM", 
		"DATA", "STAR", "COUNT", "RPAREN", "WHERE", "EQ", "COMMA", "NE", "IN", 
		"NOT_IN", "GT", "LT", "GE", "IS", "LE", "AND", "EMPTY", "OR", "ACCOUNT", 
		"IDENTIFIER", "DATE", "DIGIT", "IDENTIFIER_CHAR", "VALUE_CHAR", "WS", 
		"INVALID"
	};


	public TriggersLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TriggersLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{source}'", "'{dest}'", null, "'QUERY'", "'('", "'FROM'", "'DATA'", 
		"'*'", "'COUNT'", "')'", "'WHERE'", "'='", "','", "'!='", "'in'", null, 
		"'>'", "'<'", "'>='", "'is'", "'<='", "'AND'", null, "'OR'", "'#{account}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SOURCE_TOKEN", "DEST_TOKEN", "VALUEIDENTIFIER", "QUERY", "LPAREN", 
		"FROM", "DATA", "STAR", "COUNT", "RPAREN", "WHERE", "EQ", "COMMA", "NE", 
		"IN", "NOT_IN", "GT", "LT", "GE", "IS", "LE", "AND", "EMPTY", "OR", "ACCOUNT", 
		"IDENTIFIER", "DATE", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Triggers.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TriggersLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,4,2,84,8,2,11,2,12,2,85,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
		1,15,4,15,139,8,15,11,15,12,15,140,1,15,1,15,1,15,1,16,1,16,1,17,1,17,
		1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,
		1,22,5,22,165,8,22,10,22,12,22,168,9,22,1,22,1,22,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		4,25,190,8,25,11,25,12,25,191,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,5,28,213,8,28,10,
		28,12,28,216,9,28,1,29,1,29,1,30,4,30,221,8,30,11,30,12,30,222,1,30,1,
		30,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,0,57,0,59,0,61,28,63,29,1,0,5,1,0,48,57,3,0,
		65,90,95,95,97,122,6,0,44,44,46,46,48,57,65,90,95,95,97,122,2,0,123,123,
		125,125,3,0,9,10,13,13,32,32,230,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,74,
		1,0,0,0,5,81,1,0,0,0,7,89,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,102,1,
		0,0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,115,1,0,0,0,21,117,1,0,0,0,23,123,
		1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,130,1,0,0,0,31,133,1,0,0,0,33,
		145,1,0,0,0,35,147,1,0,0,0,37,149,1,0,0,0,39,152,1,0,0,0,41,155,1,0,0,
		0,43,158,1,0,0,0,45,162,1,0,0,0,47,171,1,0,0,0,49,174,1,0,0,0,51,185,1,
		0,0,0,53,195,1,0,0,0,55,208,1,0,0,0,57,210,1,0,0,0,59,217,1,0,0,0,61,220,
		1,0,0,0,63,226,1,0,0,0,65,66,5,123,0,0,66,67,5,115,0,0,67,68,5,111,0,0,
		68,69,5,117,0,0,69,70,5,114,0,0,70,71,5,99,0,0,71,72,5,101,0,0,72,73,5,
		125,0,0,73,2,1,0,0,0,74,75,5,123,0,0,75,76,5,100,0,0,76,77,5,101,0,0,77,
		78,5,115,0,0,78,79,5,116,0,0,79,80,5,125,0,0,80,4,1,0,0,0,81,83,5,123,
		0,0,82,84,3,59,29,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,
		0,0,0,86,87,1,0,0,0,87,88,5,125,0,0,88,6,1,0,0,0,89,90,5,81,0,0,90,91,
		5,85,0,0,91,92,5,69,0,0,92,93,5,82,0,0,93,94,5,89,0,0,94,8,1,0,0,0,95,
		96,5,40,0,0,96,10,1,0,0,0,97,98,5,70,0,0,98,99,5,82,0,0,99,100,5,79,0,
		0,100,101,5,77,0,0,101,12,1,0,0,0,102,103,5,68,0,0,103,104,5,65,0,0,104,
		105,5,84,0,0,105,106,5,65,0,0,106,14,1,0,0,0,107,108,5,42,0,0,108,16,1,
		0,0,0,109,110,5,67,0,0,110,111,5,79,0,0,111,112,5,85,0,0,112,113,5,78,
		0,0,113,114,5,84,0,0,114,18,1,0,0,0,115,116,5,41,0,0,116,20,1,0,0,0,117,
		118,5,87,0,0,118,119,5,72,0,0,119,120,5,69,0,0,120,121,5,82,0,0,121,122,
		5,69,0,0,122,22,1,0,0,0,123,124,5,61,0,0,124,24,1,0,0,0,125,126,5,44,0,
		0,126,26,1,0,0,0,127,128,5,33,0,0,128,129,5,61,0,0,129,28,1,0,0,0,130,
		131,5,105,0,0,131,132,5,110,0,0,132,30,1,0,0,0,133,134,5,110,0,0,134,135,
		5,111,0,0,135,136,5,116,0,0,136,138,1,0,0,0,137,139,3,61,30,0,138,137,
		1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,
		0,142,143,5,105,0,0,143,144,5,110,0,0,144,32,1,0,0,0,145,146,5,62,0,0,
		146,34,1,0,0,0,147,148,5,60,0,0,148,36,1,0,0,0,149,150,5,62,0,0,150,151,
		5,61,0,0,151,38,1,0,0,0,152,153,5,105,0,0,153,154,5,115,0,0,154,40,1,0,
		0,0,155,156,5,60,0,0,156,157,5,61,0,0,157,42,1,0,0,0,158,159,5,65,0,0,
		159,160,5,78,0,0,160,161,5,68,0,0,161,44,1,0,0,0,162,166,5,123,0,0,163,
		165,3,61,30,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,
		1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,125,0,0,170,46,1,0,0,
		0,171,172,5,79,0,0,172,173,5,82,0,0,173,48,1,0,0,0,174,175,5,35,0,0,175,
		176,5,123,0,0,176,177,5,97,0,0,177,178,5,99,0,0,178,179,5,99,0,0,179,180,
		5,111,0,0,180,181,5,117,0,0,181,182,5,110,0,0,182,183,5,116,0,0,183,184,
		5,125,0,0,184,50,1,0,0,0,185,186,5,35,0,0,186,187,5,123,0,0,187,189,1,
		0,0,0,188,190,3,57,28,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,
		0,191,192,1,0,0,0,192,193,1,0,0,0,193,194,5,125,0,0,194,52,1,0,0,0,195,
		196,5,123,0,0,196,197,3,55,27,0,197,198,3,55,27,0,198,199,3,55,27,0,199,
		200,3,55,27,0,200,201,5,45,0,0,201,202,3,55,27,0,202,203,3,55,27,0,203,
		204,5,45,0,0,204,205,3,55,27,0,205,206,3,55,27,0,206,207,5,125,0,0,207,
		54,1,0,0,0,208,209,7,0,0,0,209,56,1,0,0,0,210,214,7,1,0,0,211,213,7,2,
		0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
		58,1,0,0,0,216,214,1,0,0,0,217,218,8,3,0,0,218,60,1,0,0,0,219,221,7,4,
		0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,
		224,1,0,0,0,224,225,6,30,0,0,225,62,1,0,0,0,226,227,9,0,0,0,227,64,1,0,
		0,0,7,0,85,140,166,191,214,222,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
