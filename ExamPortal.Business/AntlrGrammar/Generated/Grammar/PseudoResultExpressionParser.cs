//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/PseudoResultExpression.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PseudoResultExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, IDENTIFIER=16, 
		WS=17;
	public const int
		RULE_start = 0, RULE_expression = 1, RULE_term = 2, RULE_math_expression = 3, 
		RULE_math_term = 4, RULE_operator = 5, RULE_logical_operator = 6, RULE_math_operator = 7;
	public static readonly string[] ruleNames = {
		"start", "expression", "term", "math_expression", "math_term", "operator", 
		"logical_operator", "math_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'abs('", "'-'", "'+'", "'='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'AND'", "'OR'", "'/'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoResultExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoResultExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoResultExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoResultExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PseudoResultExpressionParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			expression();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext[] logical_operator() {
			return GetRuleContexts<Logical_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator(int i) {
			return GetRuleContext<Logical_operatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			term();
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11 || _la==T__12) {
				{
				{
				State = 20;
				logical_operator();
				State = 21;
				term();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_expressionContext[] math_expression() {
			return GetRuleContexts<Math_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_expressionContext math_expression(int i) {
			return GetRuleContext<Math_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				Match(T__0);
				State = 29;
				expression();
				State = 30;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				math_expression();
				State = 33;
				@operator();
				State = 34;
				math_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_termContext[] math_term() {
			return GetRuleContexts<Math_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_termContext math_term(int i) {
			return GetRuleContext<Math_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_operatorContext[] math_operator() {
			return GetRuleContexts<Math_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_operatorContext math_operator(int i) {
			return GetRuleContext<Math_operatorContext>(i);
		}
		public Math_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterMath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitMath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_expressionContext math_expression() {
		Math_expressionContext _localctx = new Math_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_math_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			math_term();
			State = 44;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 39;
					math_operator();
					}
					State = 40;
					math_term();
					}
					} 
				}
				State = 46;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_expressionContext math_expression() {
			return GetRuleContext<Math_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PseudoResultExpressionParser.IDENTIFIER, 0); }
		public Math_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterMath_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitMath_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_termContext math_term() {
		Math_termContext _localctx = new Math_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_math_term);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				Match(T__0);
				State = 48;
				math_expression();
				State = 49;
				Match(T__1);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				Match(T__2);
				State = 52;
				math_expression();
				State = 53;
				Match(T__1);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55;
				Match(T__3);
				State = 56;
				math_expression();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				Match(T__4);
				State = 58;
				math_expression();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_operatorContext : ParserRuleContext {
		public Math_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.EnterMath_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoResultExpressionListener typedListener = listener as IPseudoResultExpressionListener;
			if (typedListener != null) typedListener.ExitMath_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoResultExpressionVisitor<TResult> typedVisitor = visitor as IPseudoResultExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_operatorContext math_operator() {
		Math_operatorContext _localctx = new Math_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_math_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 49200L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,69,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,24,8,1,10,1,12,1,27,9,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,37,8,2,1,3,1,3,1,3,1,3,5,3,43,8,3,10,3,12,3,
		46,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,61,8,4,
		1,5,1,5,1,6,1,6,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,3,1,0,6,11,1,0,
		12,13,2,0,4,5,14,15,67,0,16,1,0,0,0,2,19,1,0,0,0,4,36,1,0,0,0,6,38,1,0,
		0,0,8,60,1,0,0,0,10,62,1,0,0,0,12,64,1,0,0,0,14,66,1,0,0,0,16,17,3,2,1,
		0,17,18,5,0,0,1,18,1,1,0,0,0,19,25,3,4,2,0,20,21,3,12,6,0,21,22,3,4,2,
		0,22,24,1,0,0,0,23,20,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,
		0,26,3,1,0,0,0,27,25,1,0,0,0,28,29,5,1,0,0,29,30,3,2,1,0,30,31,5,2,0,0,
		31,37,1,0,0,0,32,33,3,6,3,0,33,34,3,10,5,0,34,35,3,6,3,0,35,37,1,0,0,0,
		36,28,1,0,0,0,36,32,1,0,0,0,37,5,1,0,0,0,38,44,3,8,4,0,39,40,3,14,7,0,
		40,41,3,8,4,0,41,43,1,0,0,0,42,39,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,
		44,45,1,0,0,0,45,7,1,0,0,0,46,44,1,0,0,0,47,48,5,1,0,0,48,49,3,6,3,0,49,
		50,5,2,0,0,50,61,1,0,0,0,51,52,5,3,0,0,52,53,3,6,3,0,53,54,5,2,0,0,54,
		61,1,0,0,0,55,56,5,4,0,0,56,61,3,6,3,0,57,58,5,5,0,0,58,61,3,6,3,0,59,
		61,5,16,0,0,60,47,1,0,0,0,60,51,1,0,0,0,60,55,1,0,0,0,60,57,1,0,0,0,60,
		59,1,0,0,0,61,9,1,0,0,0,62,63,7,0,0,0,63,11,1,0,0,0,64,65,7,1,0,0,65,13,
		1,0,0,0,66,67,7,2,0,0,67,15,1,0,0,0,4,25,36,44,60
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
