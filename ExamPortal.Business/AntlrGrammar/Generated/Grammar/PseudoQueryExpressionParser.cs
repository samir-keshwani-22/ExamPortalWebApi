//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/PseudoQueryExpression.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PseudoQueryExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QUERY=1, FROM=2, DATA=3, WHERE=4, AND=5, OR=6, IS=7, PAST=8, BEFORE=9, 
		COUNT=10, SUM=11, IN=12, NOT_IN=13, TRANSACTION_DATE=14, SOURCE_TOKEN=15, 
		DEST_TOKEN=16, EQ=17, NE=18, GT=19, LT=20, GE=21, LE=22, LPAREN=23, RPAREN=24, 
		COMMA=25, STAR=26, TIMEUNIT=27, DATE=28, IDENTIFIER=29, VALUEIDENTIFIER=30, 
		EMPTY=31, INT=32, WS=33, INVALID=34;
	public const int
		RULE_start = 0, RULE_query = 1, RULE_aggregateQuery = 2, RULE_aggregateList = 3, 
		RULE_aggregate = 4, RULE_aggregateFunction = 5, RULE_timeFilter = 6, RULE_timeReference = 7, 
		RULE_whereClause = 8, RULE_preExpression = 9, RULE_sourceDestSpecifier = 10, 
		RULE_expression = 11, RULE_term = 12, RULE_field = 13, RULE_operator = 14, 
		RULE_value = 15, RULE_logicalOperator = 16;
	public static readonly string[] ruleNames = {
		"start", "query", "aggregateQuery", "aggregateList", "aggregate", "aggregateFunction", 
		"timeFilter", "timeReference", "whereClause", "preExpression", "sourceDestSpecifier", 
		"expression", "term", "field", "operator", "value", "logicalOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'QUERY'", "'FROM'", "'DATA'", "'WHERE'", "'AND'", "'OR'", "'is'", 
		"'PAST'", "'before'", "'COUNT'", "'SUM'", "'in'", null, "'transaction date'", 
		"'{source}'", "'{dest}'", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'('", "')'", "','", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUERY", "FROM", "DATA", "WHERE", "AND", "OR", "IS", "PAST", "BEFORE", 
		"COUNT", "SUM", "IN", "NOT_IN", "TRANSACTION_DATE", "SOURCE_TOKEN", "DEST_TOKEN", 
		"EQ", "NE", "GT", "LT", "GE", "LE", "LPAREN", "RPAREN", "COMMA", "STAR", 
		"TIMEUNIT", "DATE", "IDENTIFIER", "VALUEIDENTIFIER", "EMPTY", "INT", "WS", 
		"INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoQueryExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoQueryExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoQueryExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoQueryExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PseudoQueryExpressionParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			query();
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateQueryContext aggregateQuery() {
			return GetRuleContext<AggregateQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			aggregateQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PseudoQueryExpressionParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggregateListContext aggregateList() {
			return GetRuleContext<AggregateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PseudoQueryExpressionParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(PseudoQueryExpressionParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFilterContext timeFilter() {
			return GetRuleContext<TimeFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public AggregateQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateQueryContext aggregateQuery() {
		AggregateQueryContext _localctx = new AggregateQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_aggregateQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(QUERY);
			State = 40;
			aggregateList();
			State = 41;
			Match(FROM);
			State = 42;
			Match(DATA);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAST) {
				{
				State = 43;
				timeFilter();
				}
			}

			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 46;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext[] aggregate() {
			return GetRuleContexts<AggregateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate(int i) {
			return GetRuleContext<AggregateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PseudoQueryExpressionParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PseudoQueryExpressionParser.COMMA, i);
		}
		public AggregateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateListContext aggregateList() {
		AggregateListContext _localctx = new AggregateListContext(Context, State);
		EnterRule(_localctx, 6, RULE_aggregateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			aggregate();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 50;
				Match(COMMA);
				State = 51;
				aggregate();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateFunctionContext aggregateFunction() {
			return GetRuleContext<AggregateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PseudoQueryExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PseudoQueryExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUEIDENTIFIER() { return GetToken(PseudoQueryExpressionParser.VALUEIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PseudoQueryExpressionParser.STAR, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 8, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			aggregateFunction();
			State = 58;
			Match(LPAREN);
			State = 59;
			_la = TokenStream.LA(1);
			if ( !(_la==STAR || _la==VALUEIDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 60;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(PseudoQueryExpressionParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(PseudoQueryExpressionParser.SUM, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateFunctionContext aggregateFunction() {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_aggregateFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !(_la==COUNT || _la==SUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(PseudoQueryExpressionParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PseudoQueryExpressionParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEUNIT() { return GetToken(PseudoQueryExpressionParser.TIMEUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PseudoQueryExpressionParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeReferenceContext timeReference() {
			return GetRuleContext<TimeReferenceContext>(0);
		}
		public TimeFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTimeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTimeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeFilterContext timeFilter() {
		TimeFilterContext _localctx = new TimeFilterContext(Context, State);
		EnterRule(_localctx, 12, RULE_timeFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(PAST);
			State = 65;
			Match(INT);
			State = 66;
			Match(TIMEUNIT);
			State = 67;
			Match(FROM);
			State = 68;
			timeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_DATE() { return GetToken(PseudoQueryExpressionParser.TRANSACTION_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PseudoQueryExpressionParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEUNIT() { return GetToken(PseudoQueryExpressionParser.TIMEUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PseudoQueryExpressionParser.BEFORE, 0); }
		public TimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTimeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTimeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeReferenceContext timeReference() {
		TimeReferenceContext _localctx = new TimeReferenceContext(Context, State);
		EnterRule(_localctx, 14, RULE_timeReference);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRANSACTION_DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				Match(TRANSACTION_DATE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				Match(INT);
				State = 72;
				Match(TIMEUNIT);
				State = 73;
				Match(BEFORE);
				State = 74;
				Match(TRANSACTION_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PseudoQueryExpressionParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreExpressionContext preExpression() {
			return GetRuleContext<PreExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(WHERE);
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 78;
				preExpression();
				}
				break;
			}
			State = 81;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PseudoQueryExpressionParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PseudoQueryExpressionParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceDestSpecifierContext sourceDestSpecifier() {
			return GetRuleContext<SourceDestSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PseudoQueryExpressionParser.AND, 0); }
		public PreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterPreExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitPreExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreExpressionContext preExpression() {
		PreExpressionContext _localctx = new PreExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_preExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(IDENTIFIER);
			State = 84;
			Match(IS);
			State = 85;
			sourceDestSpecifier();
			State = 86;
			Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDestSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TOKEN() { return GetToken(PseudoQueryExpressionParser.SOURCE_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEST_TOKEN() { return GetToken(PseudoQueryExpressionParser.DEST_TOKEN, 0); }
		public SourceDestSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDestSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterSourceDestSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitSourceDestSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceDestSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceDestSpecifierContext sourceDestSpecifier() {
		SourceDestSpecifierContext _localctx = new SourceDestSpecifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_sourceDestSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==SOURCE_TOKEN || _la==DEST_TOKEN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext[] logicalOperator() {
			return GetRuleContexts<LogicalOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator(int i) {
			return GetRuleContext<LogicalOperatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			term();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND || _la==OR) {
				{
				{
				State = 91;
				logicalOperator();
				State = 92;
				term();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PseudoQueryExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PseudoQueryExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 24, RULE_term);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				Match(LPAREN);
				State = 100;
				expression();
				State = 101;
				Match(RPAREN);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				field();
				State = 104;
				@operator();
				State = 105;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PseudoQueryExpressionParser.IDENTIFIER, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 26, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(PseudoQueryExpressionParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(PseudoQueryExpressionParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PseudoQueryExpressionParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PseudoQueryExpressionParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(PseudoQueryExpressionParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(PseudoQueryExpressionParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PseudoQueryExpressionParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IN() { return GetToken(PseudoQueryExpressionParser.NOT_IN, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8269824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUEIDENTIFIER() { return GetToken(PseudoQueryExpressionParser.VALUEIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(PseudoQueryExpressionParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(PseudoQueryExpressionParser.EMPTY, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3489660928L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PseudoQueryExpressionParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PseudoQueryExpressionParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,34,118,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,2,45,8,2,
		1,2,3,2,48,8,2,1,3,1,3,1,3,5,3,53,8,3,10,3,12,3,56,9,3,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,76,8,7,1,8,
		1,8,3,8,80,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,
		11,5,11,95,8,11,10,11,12,11,98,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,3,12,108,8,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,0,0,17,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,6,2,0,26,26,30,30,1,0,
		10,11,1,0,15,16,2,0,12,13,17,22,2,0,28,28,30,31,1,0,5,6,107,0,34,1,0,0,
		0,2,37,1,0,0,0,4,39,1,0,0,0,6,49,1,0,0,0,8,57,1,0,0,0,10,62,1,0,0,0,12,
		64,1,0,0,0,14,75,1,0,0,0,16,77,1,0,0,0,18,83,1,0,0,0,20,88,1,0,0,0,22,
		90,1,0,0,0,24,107,1,0,0,0,26,109,1,0,0,0,28,111,1,0,0,0,30,113,1,0,0,0,
		32,115,1,0,0,0,34,35,3,2,1,0,35,36,5,0,0,1,36,1,1,0,0,0,37,38,3,4,2,0,
		38,3,1,0,0,0,39,40,5,1,0,0,40,41,3,6,3,0,41,42,5,2,0,0,42,44,5,3,0,0,43,
		45,3,12,6,0,44,43,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,46,48,3,16,8,0,47,
		46,1,0,0,0,47,48,1,0,0,0,48,5,1,0,0,0,49,54,3,8,4,0,50,51,5,25,0,0,51,
		53,3,8,4,0,52,50,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,
		7,1,0,0,0,56,54,1,0,0,0,57,58,3,10,5,0,58,59,5,23,0,0,59,60,7,0,0,0,60,
		61,5,24,0,0,61,9,1,0,0,0,62,63,7,1,0,0,63,11,1,0,0,0,64,65,5,8,0,0,65,
		66,5,32,0,0,66,67,5,27,0,0,67,68,5,2,0,0,68,69,3,14,7,0,69,13,1,0,0,0,
		70,76,5,14,0,0,71,72,5,32,0,0,72,73,5,27,0,0,73,74,5,9,0,0,74,76,5,14,
		0,0,75,70,1,0,0,0,75,71,1,0,0,0,76,15,1,0,0,0,77,79,5,4,0,0,78,80,3,18,
		9,0,79,78,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,3,22,11,0,82,17,1,
		0,0,0,83,84,5,29,0,0,84,85,5,7,0,0,85,86,3,20,10,0,86,87,5,5,0,0,87,19,
		1,0,0,0,88,89,7,2,0,0,89,21,1,0,0,0,90,96,3,24,12,0,91,92,3,32,16,0,92,
		93,3,24,12,0,93,95,1,0,0,0,94,91,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,
		97,1,0,0,0,97,23,1,0,0,0,98,96,1,0,0,0,99,100,5,23,0,0,100,101,3,22,11,
		0,101,102,5,24,0,0,102,108,1,0,0,0,103,104,3,26,13,0,104,105,3,28,14,0,
		105,106,3,30,15,0,106,108,1,0,0,0,107,99,1,0,0,0,107,103,1,0,0,0,108,25,
		1,0,0,0,109,110,5,29,0,0,110,27,1,0,0,0,111,112,7,3,0,0,112,29,1,0,0,0,
		113,114,7,4,0,0,114,31,1,0,0,0,115,116,7,5,0,0,116,33,1,0,0,0,7,44,47,
		54,75,79,96,107
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
