/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ExamPortal.API.Converters;

namespace ExamPortal.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RuleEvaluatorRequest : IEquatable<RuleEvaluatorRequest>
    {
        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        /* <example>#{amount} &gt;&#x3D; {5000}</example> */
        [Required]
        [DataMember(Name="triggers", EmitDefaultValue=false)]
        public string Triggers { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<Query> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        /* <example>Q1_count &gt; 0 AND Q1_sum &gt;&#x3D; 3 AND (Q1_sum/Q1_count)*100 &gt;&#x3D; 150 AND (Q1_count/Q1_sum)*100 &gt;&#x3D; 150</example> */
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleEvaluatorRequest {\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RuleEvaluatorRequest)obj);
        }

        /// <summary>
        /// Returns true if RuleEvaluatorRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleEvaluatorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleEvaluatorRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Triggers == other.Triggers ||
                    Triggers != null &&
                    Triggers.Equals(other.Triggers)
                ) && 
                (
                    Queries == other.Queries ||
                    Queries != null &&
                    other.Queries != null &&
                    Queries.SequenceEqual(other.Queries)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Triggers != null)
                    hashCode = hashCode * 59 + Triggers.GetHashCode();
                    if (Queries != null)
                    hashCode = hashCode * 59 + Queries.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RuleEvaluatorRequest left, RuleEvaluatorRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RuleEvaluatorRequest left, RuleEvaluatorRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
