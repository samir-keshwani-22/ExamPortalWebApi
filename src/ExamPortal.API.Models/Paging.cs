/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ExamPortal.API.Converters;

namespace ExamPortal.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Paging : IEquatable<Paging>
    {
        /// <summary>
        /// Gets or Sets PageIndex
        /// </summary>
        /* <example>1</example> */
        [DataMember(Name="pageIndex", EmitDefaultValue=true)]
        public long PageIndex { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        /* <example>10</example> */
        [DataMember(Name="pageSize", EmitDefaultValue=true)]
        public long PageSize { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        /* <example>100</example> */
        [DataMember(Name="totalPages", EmitDefaultValue=true)]
        public long TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecords
        /// </summary>
        /* <example>100</example> */
        [DataMember(Name="totalRecords", EmitDefaultValue=true)]
        public long TotalRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Paging {\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Paging)obj);
        }

        /// <summary>
        /// Returns true if Paging instances are equal
        /// </summary>
        /// <param name="other">Instance of Paging to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Paging other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PageIndex == other.PageIndex ||
                    
                    PageIndex.Equals(other.PageIndex)
                ) && 
                (
                    PageSize == other.PageSize ||
                    
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    TotalPages == other.TotalPages ||
                    
                    TotalPages.Equals(other.TotalPages)
                ) && 
                (
                    TotalRecords == other.TotalRecords ||
                    
                    TotalRecords.Equals(other.TotalRecords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + PageIndex.GetHashCode();
                    
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalPages.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalRecords.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Paging left, Paging right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Paging left, Paging right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
