/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ExamPortal.API.Converters;

namespace ExamPortal.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QuestionUpdate : IEquatable<QuestionUpdate>
    {
        /// <summary>
        /// Gets or Sets ExamId
        /// </summary>
        [DataMember(Name="examId", EmitDefaultValue=true)]
        public int ExamId { get; set; }

        /// <summary>
        /// Gets or Sets QuestionText
        /// </summary>
        [DataMember(Name="questionText", EmitDefaultValue=true)]
        public string QuestionText { get; set; }

        /// <summary>
        /// Gets or Sets QuestionType
        /// </summary>
        [DataMember(Name="questionType", EmitDefaultValue=true)]
        public string QuestionType { get; set; }

        /// <summary>
        /// Gets or Sets Marks
        /// </summary>
        [DataMember(Name="marks", EmitDefaultValue=true)]
        public int? Marks { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name="topic", EmitDefaultValue=true)]
        public string Topic { get; set; }

        /// <summary>
        /// Gets or Sets DifficultyLevel
        /// </summary>
        [DataMember(Name="difficultyLevel", EmitDefaultValue=true)]
        public string DifficultyLevel { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=true)]
        public int? UpdatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuestionUpdate {\n");
            sb.Append("  ExamId: ").Append(ExamId).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  Marks: ").Append(Marks).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  DifficultyLevel: ").Append(DifficultyLevel).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuestionUpdate)obj);
        }

        /// <summary>
        /// Returns true if QuestionUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of QuestionUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuestionUpdate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExamId == other.ExamId ||
                    
                    ExamId.Equals(other.ExamId)
                ) && 
                (
                    QuestionText == other.QuestionText ||
                    QuestionText != null &&
                    QuestionText.Equals(other.QuestionText)
                ) && 
                (
                    QuestionType == other.QuestionType ||
                    QuestionType != null &&
                    QuestionType.Equals(other.QuestionType)
                ) && 
                (
                    Marks == other.Marks ||
                    Marks != null &&
                    Marks.Equals(other.Marks)
                ) && 
                (
                    Topic == other.Topic ||
                    Topic != null &&
                    Topic.Equals(other.Topic)
                ) && 
                (
                    DifficultyLevel == other.DifficultyLevel ||
                    DifficultyLevel != null &&
                    DifficultyLevel.Equals(other.DifficultyLevel)
                ) && 
                (
                    UpdatedBy == other.UpdatedBy ||
                    UpdatedBy != null &&
                    UpdatedBy.Equals(other.UpdatedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ExamId.GetHashCode();
                    if (QuestionText != null)
                    hashCode = hashCode * 59 + QuestionText.GetHashCode();
                    if (QuestionType != null)
                    hashCode = hashCode * 59 + QuestionType.GetHashCode();
                    if (Marks != null)
                    hashCode = hashCode * 59 + Marks.GetHashCode();
                    if (Topic != null)
                    hashCode = hashCode * 59 + Topic.GetHashCode();
                    if (DifficultyLevel != null)
                    hashCode = hashCode * 59 + DifficultyLevel.GetHashCode();
                    if (UpdatedBy != null)
                    hashCode = hashCode * 59 + UpdatedBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QuestionUpdate left, QuestionUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuestionUpdate left, QuestionUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
