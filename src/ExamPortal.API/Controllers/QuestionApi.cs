/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ExamPortal.API.Attributes;
using ExamPortal.API.Models;

namespace ExamPortal.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class QuestionApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new question
        /// </summary>
        /// <param name="questionCreate">Question data to create</param>
        /// <response code="201">Question created</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/questions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddQuestion")]
        [SwaggerResponse(statusCode: 201, type: typeof(Question), description: "Question created")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> AddQuestion([FromBody]QuestionCreate questionCreate);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Question deleted</response>
        /// <response code="404">Question not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/questions/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteQuestion")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> DeleteQuestion([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Get a question by ID
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Question details</response>
        /// <response code="404">Question not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/questions/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetQuestionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Question), description: "Question details")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetQuestionById([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// List all questions
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/questions")]
        [ValidateModelState]
        [SwaggerOperation("ListQuestions")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListQuestions200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> ListQuestions([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize);

        /// <summary>
        /// Update an existing question
        /// </summary>
        /// <param name="id"></param>
        /// <param name="questionUpdate">Question data to update</param>
        /// <response code="200">Question updated</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Question not found</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/questions/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateQuestion")]
        [SwaggerResponse(statusCode: 200, type: typeof(Question), description: "Question updated")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> UpdateQuestion([FromRoute (Name = "id")][Required]int id, [FromBody]QuestionUpdate questionUpdate);
    }
}
