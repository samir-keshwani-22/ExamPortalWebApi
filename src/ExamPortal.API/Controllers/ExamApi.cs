/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ExamPortal.API.Attributes;
using ExamPortal.API.Models;

namespace ExamPortal.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ExamApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new exam
        /// </summary>
        /// <param name="examCreate">Exam data to create</param>
        /// <response code="201">Exam created</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/exams")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddExam")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> AddExam([FromBody]ExamCreate examCreate);

        /// <summary>
        /// Delete an exam
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Exam deleted</response>
        /// <response code="404">Exam not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/exams/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteExam")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Exam not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> DeleteExam([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Get an exam by ID
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Exam details</response>
        /// <response code="404">Exam not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/exams/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetExamById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Exam), description: "Exam details")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Exam not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetExamById([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// List all exams
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="title"></param>
        /// <param name="startDateFrom"></param>
        /// <param name="startDateTo"></param>
        /// <param name="endDateFrom"></param>
        /// <param name="endDateTo"></param>
        /// <param name="createdBy"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/exams")]
        [ValidateModelState]
        [SwaggerOperation("ListExams")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListExams200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> ListExams([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize, [FromQuery (Name = "title")]string title, [FromQuery (Name = "startDateFrom")]DateOnly? startDateFrom, [FromQuery (Name = "startDateTo")]DateOnly? startDateTo, [FromQuery (Name = "endDateFrom")]DateOnly? endDateFrom, [FromQuery (Name = "endDateTo")]DateOnly? endDateTo, [FromQuery (Name = "createdBy")]long? createdBy);

        /// <summary>
        /// Update an existing exam
        /// </summary>
        /// <param name="id"></param>
        /// <param name="examUpdate">Exam data to update</param>
        /// <response code="200">Exam updated</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Exam not found</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/exams/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateExam")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Exam not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> UpdateExam([FromRoute (Name = "id")][Required]int id, [FromBody]ExamUpdate examUpdate);
    }
}
