/*
 * Exam Portal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ExamPortal.API.Attributes;
using ExamPortal.API.Models;

namespace ExamPortal.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class QuestionOptionApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new question option
        /// </summary>
        /// <param name="questionOptionCreate">Question option data to create</param>
        /// <response code="201">Question option created</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/question-options")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddQuestionOption")]
        [SwaggerResponse(statusCode: 201, type: typeof(QuestionOption), description: "Question option created")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> AddQuestionOption([FromBody]QuestionOptionCreate questionOptionCreate);

        /// <summary>
        /// Delete a question option
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Question option deleted</response>
        /// <response code="404">Question option not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/question-options/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteQuestionOption")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question option not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> DeleteQuestionOption([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Get a question option by ID
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Question option details</response>
        /// <response code="404">Question option not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/question-options/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetQuestionOptionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuestionOption), description: "Question option details")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question option not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetQuestionOptionById([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// List all question options
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/question-options")]
        [ValidateModelState]
        [SwaggerOperation("ListQuestionOptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListQuestionOptions200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> ListQuestionOptions([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize);

        /// <summary>
        /// Update an existing question option
        /// </summary>
        /// <param name="id"></param>
        /// <param name="questionOptionUpdate">Question option data to update</param>
        /// <response code="200">Question option updated</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Question option not found</response>
        /// <response code="422">Validation exception</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/question-options/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateQuestionOption")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuestionOption), description: "Question option updated")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Question option not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Validation exception")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> UpdateQuestionOption([FromRoute (Name = "id")][Required]int id, [FromBody]QuestionOptionUpdate questionOptionUpdate);
    }
}
